1. JRE、JDK、JVM的关系。

JDK：包括了JAVA运行环境JRE，java工具和java基础类库
JRE:JAVA的运行环境，包括虚拟机JVM，运行时类库，java运用启动器
JVM:JAVA虚拟机，使得java文件编译成class文件，也是Java能够跨平台使用的基础

2. IDE是什么，你所使用的ide又是啥，为什么使用IDE工具

IDE是集成开发环境，用来帮助开发代码的工具，我使用的是Eclipse,用了ide可以提高我们的编码效率，提高我们代码的规范性，
也可以帮助我们快速查找bug，从而提高开发效率

3.Java编译的过程。

通过JDK翻译
开发人员编写java文件，然后通过javac将之编译成字节码(.class文件)，再然后字节码被装入内存，一旦字节码进入虚拟
机，它就会被解释器解释执行，或者是被即时代码发生器有选择的转换成机器码执行，最后将信息输出到控制台上。

4、Java数据类型：

基本数据类型以及复合（引用）数据类型 
区别：
基本数据类型:不同变量会分配不同存储空间,并且存储空间中存储的是该变量的值.赋值操作传递的是变量的值
.改变一个变量不会影响另一个变量的值. （传递值）
引用数据类型:(牵一发而动全身.之间有想通之处)赋值是把原对象引用传递给另一个引用.对数组而言当一个数组引用赋值给
另一个数组引用后,两个引用指向同一个数组,即指向同一块内存空间.(传递地址)

5、背诵基本数据类型以及复合（引用）数据类型的种类

复合引用类型：类类型，数组类型，接口类
byte:字节型,short:短整型,int:整形,long 长整型,boolean:布尔型,float:单精度浮点型,double:双精度浮点型,char:字符型
类型的作用：向计算机明确变量的属性(如整形、浮点型、字符串，限定变量的运算处理方式)、所需的存储空间大小、以及
类类型变量的内部结构和可用方法表等程序运行必须的信息

6. 表达式是什么，有哪些分类

表达式由声明、变量、方法和运算符组成，分为算术表达式、赋值表达式、关系表达式、逻辑表达式
以;结尾的一段代码，即为一个表达式
表达式的运行顺序为从左向右，从上向下逐句运行，按照表达式中的运算符的优先级顺序与变量结合求值
特别的，单目运算符"++"、"--"在使用时写在变量左边将被先执行再取值，写在变量右侧则是先取值后执行
三目运算符"表达式1? 表达式2 : 表达式3" 可以替代简单的if/else语句，当表达式1值为true时执行表达式2，值为false时执行
表达式3


7.Java数组

静态初始化和动态初始化的区别：前者是编译的时候就初始化,后者是先运行,再分配其内存空间，使之动态初始化
还有数组和集合框架的优缺点：
长度区别: 
数组固定 集合可变
内容区别: 
数组可以是基本类型，也可以是引用类型,但只能定义一种类型 
集合一般只能是引用类型，但可以存放不同的类型的数据(规范下只能使用一种)


存在问题：
8、为什么需要使用程序控制语句？

控制语句即用来实现对程序流程的选择、循环、转向和返回等进行控制。
在java代码中常常使用if/else等来做程序的判断，也会使用for、while等来进行语句的循环输出
项目中例如注册的用户是否存在以及登入账号密码是否正确都需要程序控制语句来进行判断，
for、while的控制语句使得我们在页面上对用户列表数据进行循环输出,
而不用我们一对一每一个用户都要写一套代码

9、为什么需要使用类类型？

类类型属于复合（引用类型）,他可以包含不同类型的基本数据类型,类类型其实就是对基本数据类型的封装。
当我们需要传参的时候，如果需要传递相同类型的值，可以使用集合或者数组，但是如果需要传递不同的基本数据类型的时
候，例如个人资料，就需要使用类类型封装，然后传参。


10、面向对象：
种类：四种（封装、继承、多态、抽象）
封装：把代码包裹起来，让代码安全性更高，例如private修饰的只能get,set访问
继承：儿子继承父亲，那么儿子可以调用父亲的方法
多态：就是对象的不同表现把，比如打印机，然后有色打印机和黑白打印机继承打印机的打印方法重写，打印出来的效果是
不一样的。

抽象：用abscract修饰，比如定义一个动物，知道他名字和年龄，但是不知道他的叫法怎么叫，那么可以把叫声作为抽象方
法，日后在具体实现。

继承的作用、特点、在继承中如何深入使用继承的，
什么是继承：继承就是父亲刚跟儿子之间的关系，子类继承父类，子类调用父类的方法
作用：借助继承，可以扩展原有的代码，应用到其他程序中，而不必重新编写这些代码（提高代码复用性）
特点：
 1.只支持单继承，即一个子类只允许有一个父类。
 2. 子类可以拥有父类的属性和方法
 3. 子类可以拥有自己的属性和方法
 4. 子类可以重写覆盖父类的方法

封装：是什么意思、封装的修饰符的范围、封装仅仅是对于属性吗？Protected
属性要注意
数据包裹起来，只能用特定方式访问，比如私有变量用get和set
Public:任何位置都可见
protected：当前包中可见
默认的：当前包内部可见
private：仅仅在类内部可见
不是，例如单例模式，封装自己类，还有方法的封装。

多态：能够和我说一下多态的工作原理吗？通过打比方的方式能说一下吗？
多态就是子类继承父类，重写父类方法后的不同表现
比如说父类打印机他有打印这个方法，然后子类继承了父类打印机，也就相当于有了打印方法，然后重写了方法，打印机比
如有彩色打印机和黑白打印机，那么他们都有打印功能，但是打印出来的东西呈现的结果不一样，当我们要打印东西的时
候，我们调的是子类的方法，比如要打印彩色还是黑白的。

11、static和final的作用，以及使用这两种修饰符后的效果
Static和final都是修饰类
final不能用来修饰构造函数
final 修饰的方法不能被重写;但是能够被重载
final 修饰的属性也不能被更改
final 修饰的类不能被继承
static 修饰的方法不能出现this关键字
static 修饰的属性通过"类名.属性"访问；全类共享，在类加载时被创建并初始化，类加载的过程只进行一次，也就是static修
饰的属性只会被创建一次
static 修饰的代码块叫静态代码块，这个代码块只在类加载的时候被执行一次
项目中一般用final修饰变量当做常量处理，static则是修饰一些不改变变量值，比如数据的连接关闭和driver预加载

12、接口类的作用、接口类如果有属性是什么效果、接口类和接口类是什么关系、接口类特点
什么是接口：就是被interface修饰的类，里边的方法全部是抽象方法
接口可以被编写的多个程序重复调用，可以节省电脑的存储空间，并且使用接口可以减少电脑代码运行时出现的错误，在运
行多个程序时，也能更有效率的进行。
一般我们项目dao层和service层就是接口+实现类的模式
特点：接口类中的方法都是抽象方法
接口中没有构造方法，也不能实例化接口对象
一个类可以实现多个接口
接口类和正常类的关系、
接口只能由抽象方法，接口被interface修饰
接口不能实例化
抽象类的使用

13、抽象方法是啥？
抽象方法：抽象方法就是以abstract修饰的方法，这种方法只声明返回的数据类型，方法名称和所需要的参数
像我们项目中的dao层的接口类就是抽象方法

14、String和异常：String s = "1";String s = new String(); 区别是什么？
String s1 = "a" 时，首先会在字符串常量池中查找有无 “a” 这个对象。 若没找到，就创建一个 "a" 对象，然后，以 s1 为它的
引用。若在字符串常量池中找到了 “a” 这个对象， 同样也将 s1 作为它的引用。若再执行一次 String s2 = "a" , 那么 s1 和 s2
都是同一个对象的引用，即 逻辑判断 s1 == s2 的结果是 true。
String s3 = new String("a") 时，将在字符串常量池外的堆里，创建一个 "a" 对象，然后，以 s3 为它的引用。这时，s3 对应
的是 字符串常量池外的一个对象。因此，无论 s3 == s2，还是 s3 ==s1，其结果都是 false
String的常用方法介绍（5种）、String和StringBuffered区别、
String str1 = "abcDRef";
System.out.println(str1.length()); //字符串长度
System.out.println(str1.isEmpty()); //字符串是否为空
System.out.println(str1.charAt(4)); //检索某位置字符
System.out.println(str1.startsWith("ab")); //字符串是否以某个字符（串）开头
System.out.println(str1.endsWith("sf")); //同上，结尾
System.out.println(str1.substring(2)); //截取从某位开始以后的字符串
System.out.println(str1.toLowerCase());//全部转为小写字母
System.out.println(str1.toUpperCase());//大写字母
区别：String是不可变的，一旦被创建，值就不能改变
StringBuilder 是可变的，他修改值不用去重新new一个对象
String是final类，不能被继承

15、什么是异常什么是错误
（错误就是只要报错就是错误，异常是属于错误的一种，异常是属于人为性操作不当造成的错误）

16、throw和throws的区别
throw只能用于抛出一种异常，而throws可以抛出多个异常
throw用在方法实现中，而throws用在方法声明中
Throw：
作用在方法内，表示抛出具体异常，由方法体内的语句处理。
具体向外抛出的动作，所以它抛出的是一个异常实体类。若执行了Throw一定是抛出了某种异常。
Throws：
作用在方法的声明上，表示如果抛出异常，则由该方法的调用者来进行异常处理。
主要的声明这个方法会抛出会抛出某种类型的异常，让它的使用者知道捕获异常的类型。
出现异常是一种可能性，但不一定会发生异常。

17、你们在项目中如何使用异常的？
一种是try catch捕获异常，还有一种是直接抛出异常，让调用的处理

18、异常日志你是如何实现的
用AOP去写入异常日志

19、int和Integer有什么区别
Int是整型，而integer是int的封装类
int的默认值为0，而Integer的默认值为null，即Integer可以区分出未赋值和值为0的区别，int则无法表达出未赋值的情况
项目中我们需要判断空值的时候我们需要用到封装类

二阶段：
		
sqlite：
sqlite在哪里用、什么时候用数据库、为什么要用数据库（用文件File不就可以吗）、
sqLite是一个SQL数据库引擎，主要在一些小型的本地应用中使用，
用于存储应用的持久层数据，它区别于自定义文件的地 方在于它是一个关系型数据库管理系统，
在程序中可以通过数据库驱动通过使用SQL语句对其进行高效的增删改查操作，同时它也是线程安全的

使用：SQLite适用于中小规模流量的网站.适合读多写少的网站

sqlite的特点（大小、访问模式、安全性、效率性、数据连接、存储模式...）、
大小：SQLite是一款轻型的嵌入式数据库.它的数据库就是一个文件.
访问模式：
安全性：缺乏用户管理和安全功能，不支持加密功能

效率性：性能高
数据连接：不能远程服务，单机版
存储模式：一个SQLite 数据库是存储在一个单一的跨平台的磁盘文件
sql语法：左右连接特点、内连接特点、or和and区别，where和inner join on、having区别
左连接：保留左表数据，匹配右表，右表没有的null补齐
右连接：保留右表数据，匹配左表，左表没有的null补齐
内连接：左连接和右连接的交集部分
Or就是或的意思，只要一个条件成立就行
And是并且的意思，是所有条件都要成立

执行顺序：on是最先执行，where次之，having最后
on是在生成中间的临时表时起作用的，where，having是生成临时表之后对连接表再进行过滤
sql约束：非空、checked、unique、default、主键、外键
特别是外键约束（作用？不用外键约束行吗）
保持数据一致性，完整性，不使用外键也可以
视图的使用？
自增长是如何做到的？
创建一个序列名sequence，insert语句的时候，主键写成序列名.nextval
			
dao：
Action像是服务员，顾客点什么菜，菜上给几号桌，都是ta的职责；Service是厨师，action送来的菜单上的菜全是ta做的；Dao是厨房的小工，和原材料(通过hibernate操作数据库)打交道的事情全是ta管
dao全称是什么？为什么使用dao，dao属于什么方面的层，dao如何使用；
数据访问对象 Data Access Object，属于数据访问层
比如说你要你要插入一个新的用户..那么.在DAO中我们只需要提供一个insertUser(User user)这一个方法就可以了..具体的操作是在DAO中实现的…
那么对于要调用DAO的时候.我们只要知道insertUser(User)是用来插入一个新的用户…而不需要知道是如何实现的..
在dao方面你使用了哪几种设计模式
工厂模式，接口+实现类

集合框架：
数组和集合框架的区别
数组既可以存储基本数据类型又可以存储引用数据类型
集合只能存储引用数据类型
数组长度是固定的，不能增长
集合长度是可变的
List的种类、作用、是否线程安全？每一种List的数据存储方式、List的常用方法、
口的实现类有ArrayList与LinkedList，Vector，
ArrayList：底层由数组结构实现，数组在内存中的存储顺序是连续的，对集合中的元素可以进行快速访问，更适合用来随机查询数据。
LinkedList：底层由双向链表结构实现，通过节点来存储下一个元素的位置，对集合中的元素可以方便的增加与删除，更适合用于大量修改。
Vector：Vector与ArrayList的区别就是Vector是线程安全的集合，在需要线程安全而且对效率要求比较低的情况下，使用Vector。
常用方法：add,remove，get
Map的种类、作用、是否线程安全？每一种Map的数据存储方式、Map的常用方法、
map就像我们手机的电话本，键值对存储，拿到key就能得到对应的value
hashMap 线程不安全,无序
linkedHashMap 按照元素put的顺序保存 不安全
treemap 可以定义 comparator 自定义排序规则
常用方法：put，clear,get
这两种技术你使用在什么方面？
Map一般用来存储ajax请求返回的数据，lIst用来存储数据库搜索的数据
泛型你用过吗？用在什么地方，这技术好处是什么？
一般用在不确定数据类型的地方，省去强转代码，
文件操作：
流式IO和非流式IO区别
这就好比到餐厅吃饭，每来一桌客人，都有一个服务员专门为你服务，从你到餐厅到结帐走人，这样方式的好处是服务质量好，一对一的服务，VIP啊，可是缺点也很明显，成本高，如果餐厅生意好，同时来100桌客人，就需要100个服务员，那老板发工资的时候得心痛死了，这就是传统的一个连接一个线程的方式。
由阻塞服务方式改为非阻塞服务了，客人吃着的时候服务员不用一直侯在客人旁边了。传统的IO操作，比如read()，当没有数据可读的时候，线程一直阻塞被占用，直到数据到来。NIO中没有数据可读时，read()会立即返回0，线程不会阻塞

InputStream和OutputStream -》 流式IO的读和写 （能返回吗？） -》 不能，也就是只能往下读，不能回退
非流式IO：可以回退，可以指定一个位置的字节进度开始读取 （我们迅雷的断点续传以及分包下载） - NIO
RandomAccessFile


流式IO的分类
字节流和字符流的区别
字节输入流和输出流的祖先：InputStream和OutputStream
字符输入流和输出流的祖先：Reader和Writer
字节流可以处理所有文件类型的数据（图片，视频，文本·····），字符流只能处理纯文本数据（txt文本文档）
项目中文件、图片的传输就都是用字节流来传
BufferInputStream的使用，以及特点
BufferInputStream是缓冲字节输入流，
FileInputStream在读取文件的时候，一滴一滴地把水从一个缸复制到另外一个缸
BufferInputStream则是一桶一桶地把水从一个缸复制到另外一个缸。
特点：读取到一个字节/字符，先不输出，等凑足了缓冲的最大容量后一次写出去，从而提高了工作效率

装饰流干什么用的？
装饰流是什么？ 只要这个流，初始化的时候，在构造方法中传入的是另一个流，那么这个流就属于装饰流范畴
InputStreamReader -》 字节流转换成字符流
装饰流就是将 介质流进行美化（优化）
例如：字节流 -》 字符流 
读取效率提高 -》 BufferedInputStream
介质流是什么？ 只要这个流，初始化的时候，在构造方法中传入的是File或文件路径，那么这个流就是介质流
也就是说介质流和文件对接，装饰流和介质流对接


在项目中你是否使用了文件操作呢？
导出Excel下载到浏览器
线程：
生命周期
新建 New
就绪 Runnable
运行 Running
阻塞 Blocked
死亡 Dead
1.线程特点
线程的实现方式有哪些？你觉得那种比较好
继承Thread类
实现Runnable接口
实现接口好，扩展性好
线程同步你用了那种技术？你还了解哪些的线程同步技术。
sync...的使用场景、如何使用

public class ServiceFactory {
	private static ServiceFactory factory;
	private ServiceFactory() {
		
	}
	public static ServiceFactory getInstance() {
		if(factory == null) {
			factory = new ServiceFactory();
		}
		return factory;
	}
}
如果项目启动第一次，两个用户AB同时访问service层，同时调用ServiceFactory.getInstance()
那么这个就不叫做单例了

解决手段：
// 饿汉式
// private static ServiceFactory factory = new ServiceFactory(); 
private static ServiceFactory factory ;
private ServiceFactory() {
	
}

// 懒汉式
public static synchronized ServiceFactory getInstance() {
	if(factory == null) {
		factory = new ServiceFactory();
	}
	return factory;
}

synchronized： 同一时间内多个用户需要访问同一个方法时，也必须一个个执行对应的方法

wait和notify的使用，特点
调用wait方法，首先会获取监视器锁，获得成功以后，会让当前线程进入等待状态进入等待队列并且释放锁；
然后当其他线程调用notify或者notifyall以后，会选择从等待队列中唤醒任意一个线程，而执行完notify方法以后，
并不会立马唤醒线程，原因是当前的线程仍然持有这把锁，处于等待状态的线程无法获得锁。
必须要等到当前的线程执行完按monitorexit指令以后，也就是锁被释放以后，处于等待队列中的线程就可以开始竞争锁了.

wait和notify为什么需要在synchronized里面
wait方法的语义有两个，一个是释放当前的对象锁、另一个是使得当前线程进入阻塞队列， 
而这些操作都和监视器是相关的，所以wait必须要获得一个监视器锁
而对于notify来说也是一样，它是唤醒一个线程，既然要去唤醒，首先得知道它在哪里？
所以就必须要找到这个对象获取到这个对象的锁，然后到这个对象的等待队列中去唤醒一个线程。


wait和sleep的使用，区别
1，来自的类不同，sleep方法来自Thread，wait方法来自Object
2，sleep方法是线程内部方法，没有释放对象的锁，而wait方法释放了对象锁，使得其他线程可以使用同步控制块或者方法。
3，wait，notify和notifyAll是对象操作方法，必须在同步下进行，只有在synchronized里面使用，而sleep可以在任何地方使用。
4，两者都可以让线程暂停一段时间,但是本质的区别是一个线程的运行状态控制,一个是线程之间的通讯的问题，就需要激活才会进入runing状态。
socket：
说一下七层网络协议
应用层、表示层、会话层、传输层、网络层、数据链路层、物理层。
说一下tcp和udp的区别，socket是属于哪一个? tomcat属于哪一个？
Tcp是一种网络通信协议，面向连接（打电话），数据安全的（保证数据的完整）
udp是用户数据报协议，:面向无连接（发短信），数据不安全（丢包）
TCP传输效率比UDP低
SOCKET使用的就是tcp协议，而tomcat是udp
tcp和udp属于七层网络协议的哪一层
传输层
C/S框架特点，优缺点
CS是客户机和服务器结构
优点：
（1）界面和操作可以很丰富 
（2） 安全性能可以很容易保证，实现多层认证也不难 
（3）由于只有一层交互，因此响应速度较快。
缺点：
（1）适用面窄，通常用于局域网中
（2）用户群固定。由于程序需要安装才可使用，因此不适合面向一些不可知的用户
（3）维护成本高。发生一次升级，则所有客户端的程序都需要改变。
socket和tomcat的区别
socket是对TCP/IP协议的封装，Tomcat相当于是serverSocket,用来装载运行War项目的。

为什么我们企业中不使用socket进行框架搭建
socket和tomcat的区别
socket和ServeSocket属于应用型的服务器 
tomcat属于容器型的服务器

从效率和稳定性安全性方面进行讲解

容灾：
	出现的问题如何解决
	断线重连
	异常判断
	断点续传
	粘包、断包
	
	也就是说，当出现某些意外情况的时候，服务器会记录下你已经下载到多少了，下次会从这个位置的字节开始
	继续下载（将字节发给客户端）
	
	粘包、断包：
	客户端发送数据量很大，导致服务器来不及接收
	客户A：Hello x 1  服务器：返回World
	客户A：Hello x 1000000 ，有概率出现： HelloHel，两条消息粘住，并且数据不完整
		而下次收到的消息： loHell
	解决方案：readLine，收消息是通过 换行符来进行判断，数据是否结束，如果结束不再往下读取了
		
	JMF: 媒体（不会考）
	
	JSON:在什么时候用，为什么用，如何使用，他是啥？JSON的使用方式
	什么时候用：前端ajax数据传输的时候以及后端返回数据，
为什么:代码量少，编码简单，传输的数据比较清晰，主流的浏览器都支持
如何用：导入fastjson包，传输的数据写法按一个key对应一个value，或是直接用map存储传输
是啥：JSON就是一种数据交换的格式
其他：设计模式、数据库连接池、线程池、数据安全（MD5）

三阶段：

Oracle的逻辑组件和物理组件
逻辑组件：看不见的，（表空间，段，区，数据块，表）
物理组件：数据文件dbf,控制文件ctl，日志文件log
Oracle的url：jdbc:oracle:thin:@localhost:1521:orcl
Jdbc:Java数据库连接,jdbc一般做三件事，连接数据库 2、发送SQL语句 3、（从数据库）接收处理结果
Oracle:oracle数据库
Thin：连接方式为thin方式，即瘦方式，不需要客户端的方式。与之对的另一种连接方式为胖方式：cli，这种方式需要安装
客户端
Localhost：本地IP
15211：数据库监听窗口
Orcl:就是数据库默认的实例
事务的使用
事务的特性（ACID）
 1、原子性(Atomicity): 事务中所有操作是不可再分割的原子单元。事务中所有操作要么都执行成功,要么都执行失败。
 2、一致性(Consistency): 事务执行后,数据库状态与其他业务规则保持一致。如转账业务，无论事务执行成功与否，参与
转账的两个账户余额之和应该保持不变。
 3、隔离性(Isolation): 一个事务所做的修改在最终提交之前，对其他事务是不可见的 
 4、持久性(Durability): 一旦事务提
交，则其所做的修改就会永久的保存到数据库中
锁是什么
事务在操作数据库的资源时会给系统提出请求，锁住这个资源，在事务没有释放锁的时候，其他事务不能操作这个资源。
锁是干什么用的
就是用来锁住资源，只能一个事务同时操作。
锁的种类
表级锁：锁住表
表级锁分为排他锁和共享锁
共享锁：有共享锁的事务可以对数据进行读取，但是不能修改数据，每一个事物都可以加共享锁读取
排他锁：加排他锁的事务不仅可以读取数据，还能修改数据，而其他的事务不能同时操作数据。
行级锁：锁住表的某一行
service层你是如何看待的，用来做什么，能做什么，
service层又被称作业务层，是用来处理业务逻辑，它就相当于是srviet和dao层的缓冲层，dao变化不会直接影响到service。
service层在项目中你是如何部署的
Service接口+实现类，实现类调dao接口处理业务，controller层通过工厂获取对应的service。
sql：（用在哪里，怎么用，什么时候用）
Sql是结构化查询语句，用于数据库的增删改查，通过insert、select等标签来对数据库的数据进行操作
项目中我们需要对用户进行增删改查，那么就需要在dao层里使用到sql语句。
Oracle的自增长序列
在oralce主键的自增长ID就是用到序列
先create一个自增序列，然后再insert语句.Nextval就可以使用了
一般我们项目的表主键的ID都需要自增长，那么新插入数据就需要用到序列
Oracle的索引
Oracle的索引是一种供服务器在表中快速查找的一个行的数据结构，
提高查询效率，当表的某个字段一直被where时，加索引提高效率。
Oracle的分页
Oracle的视图
视图就是一个虚拟表
把一个比较复杂的查询语句 不想每次都写很多语句 就可以写个视图
①简化了操作，把经常使用的数据定义为视图。
②安全性，用户只能查询和修改能看到的数据。
③逻辑上的独立性，屏蔽了真实表的结构带来的影响
使用 Create view 视图名 as + 具体的查询


交并集关系
[1,7,9,10], [2,7,8,9]
交集：7,9
并集：1,2,7,8,9,10
html：
什么叫做html，干什么用的，在哪里用，为什么需要用html
是超文本标记语言，类似一阶段的jpane画板，用来展示界面元素的，
当我们需要去展示数据的时候
常见的一些标签有哪些？
<table></table>，<td></td>，<tr></tr>， <form></form>，<imgsrc=”图片地址”><body></body>，<title></title>，<a><div>
html的格式结构
无论是动态还是静态页面都是以“<html>”开始，然后在网页最后以“</html>”结尾。
<html>”后接着是“<head>”页头，其在<head></head>(放js,css等)
<title></title>
<body>编写页面</body>
比如html为根节点，没有父节点，然后他下面有两个子节点，head和body,head里有一个title子节点，head就是title的父节
点。
在xx标签中应 该写哪些东西
标签里的内容，css，id,name
什么是块级元素和行级元素，特点分别是什么
一般像div,table,form,h1标签是块级元素，而像a,img，input,select是行标签
块级元素都是新起一行，内容包括块级和行级，高度和宽度是可调的
行级元素一般是和其他元素标签在一行，而且高度宽度不可调，行元素只能包含行元素。
除了块级和行级元素还有哪些元素？
顶级元素，比如html,和body
css：
三种写法（分别写在哪里，并且你用的是哪一种）
在head里写style标签引用，外部引用，直接在标签元素上设置
我使用的是外部引用
选择器有哪些？9种选择器最好都要能说出来，常用的有哪些
标签选择器：例如a{} 过滤所有a标签
类选择器：.aaa{}，那么引用aaa的标签修改css样式
ID选择器：# name id=”name”那么id为name的元素标签修改样式
分组选择器（可一次选择多个标签以设置相同样式）
后代选择器（选择某个标签的所有后代以设置相同样式）
属性选择器（通过属性（如name属性）进行选择以设置相同的样式）
.通用选择器（选择所有标签以设置相同样式）
兄弟选择器（选择兄弟关系的标签设置样式）
直接父子选择器（选择父子关系的标签中子标签设置样式）
常见的css的属性（笔试中可能会有css题目）
Float:left/right;靠左/右浮动
width 宽度
height 高度
margin 外补距
padding 内补距
border 边框
font-size 文字大小
font-weight 文字加粗
background 背景属性
position 定位属性

父元素塌陷（float） 
1、同级元素只要有一个ui元素设置了float，那么不管任何的同级元素都应该设置float属性，不然有可能样式被覆盖
2、当有父子级关系的时候，子元素设置了宽高，父元素没设置宽高，但是父元素会根据子元素的宽高自适应调整，
	把子元素包裹起来（没设置float的时候）
   当子元素设置了float之后样式就浮动起来了，连父元素都不知道他什么样，还以为没有样式，就不予理睬，并且
   父元素没有宽高，所以就变成一条线了
解决方案：
	1、同级元素如果有float，那么其他的同级元素也要float
	2、子元素如果有float，那么父元素没设置宽高的时候，也要设置float

布局：
布局的种类有哪些（table、float（css+div）、frameset、flex（弹性布局）、方位（position））
你最常用的布局是哪一种，float
需要注意哪些？
float布局有哪些特点？
loat属性值挨着前一个float后的位置定位，如果剩下的空间不足，则会另起一行，另起一行也有特点，并不是直接在整个父
元素下另起一行。另起一行要优先满足围绕上一个float元素。


不理解的：
什么是线程池，在哪有用到过?
线程的实现方式有哪些？你觉得那种比较好
线程同步你用了那种技术？你还了解哪些的线程同步技术。
oracle的工作原理?oracle跟mysqlite的区别
jsp在哪里用？为什么要使用jsp ? jsp原理以及与html的区别